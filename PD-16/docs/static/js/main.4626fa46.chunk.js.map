{"version":3,"sources":["components/Header.tsx","components/web3.tsx","components/AddBet.tsx","components/DealerBalance.tsx","components/DealerDiceResult.tsx","components/PayOut.tsx","components/PlayerDiceResult.tsx","components/QueryId.tsx","components/RollDice.tsx","components/RandomResult.tsx","pages/Home.tsx","pages/IpfsImage.tsx","App.tsx","reportWebVitals.ts","index.tsx"],"names":["Header","className","web3","Web3","givenProvider","LoadWeb3","a","window","ethereum","request","method","loadContract","alert","eth","Contract","contract","abi","result","console","log","getCurrentAccount","getAccounts","accounts","AddBet","bet","account","methods","addBet","send","from","DealerBalance","dealerBalance","call","getBalance","DealerDiceResult","getDiceResultOfDealer","PayOut","payOut","id","UserDiceResult","userDiceResult","finalResult","SetUserDiceResult","getDiceResultOfUser","QueryId","queryId","RollDice","rollDice","RandomResult","getRandomResult","Home","useState","balance","setBalance","setBet","dealerResult","setDealerResult","userResult","setUserResult","setQueryId","OracleResult","setOracleResult","useEffect","newBalance","getDealerDiceResult","diceResult","getUserDiceResult","setsUserDiceResult","randomResult","getQueryId","onClick","type","placeholder","onChange","e","parseInt","target","value","IpfsImage","src","alt","App","basename","process","path","exact","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4626fa46.chunk.js","sourcesContent":["export const Header = () => {\n  return (\n    <header className=\"app-header\">\n      <h1>PolarBet</h1>\n    </header>\n  );\n};\n","import Web3 from \"web3\";\nimport contract from \"../assets/static/build/contracts/PolarBetV4.json\";\n// const contractAddress = \"polarbet.eth\"; // ENS Rinkeby\n// const contractAddress = \"0xc980207f705242bEAb7C9401F841bDd9749dDb2b\"; // Rinkeby address connected to ENS\nconst contractAddress = \"0x9cBDa1f50C374234F3aDfA793e120f0Ab1417571\"; // Rinkeby\n// const contractAddress = \"0x3C21f4A120b1FEd1b9F5Fc6c076c2E40124a3d8B\"; // Ganache\nconst web3 = new Web3(Web3.givenProvider || \"http://localhost:8545\");\n\nexport const LoadWeb3 = async () => {\n  if (window.ethereum) {\n    window.web3 = new Web3(window.ethereum);\n    window.ethereum.request({ method: \"eth_requestAccounts\" });\n    loadContract();\n  } else {\n    window.alert(\"Metamask not detected!\");\n  }\n};\n\nconst contractABI = () => {\n  const abi = contract.abi;\n  return abi;\n};\n\nconst loadContract = async () => {\n  try {\n    // const address = await web3.eth.ens.getAddress(contractAddress);\n    // console.log(\"Contract address from ENS:\", address);\n    const result = await new web3.eth.Contract(contractABI() as any, contractAddress);\n    window.contract = result;\n  } catch (e) {\n    console.log(e);\n  }\n};\n","const getCurrentAccount = async () => {\n    const accounts = await window.web3.eth.getAccounts();\n    return accounts[0];\n}\n\nexport const AddBet = async (bet: number) => {\n    const account = await getCurrentAccount();\n    window.contract.methods.addBet(bet).send({ from: account });\n};\n\n","export const DealerBalance = async () => {\n    const getBalance = await window.contract.methods.dealerBalance().call();\n    return getBalance;\n};","export const DealerDiceResult = async () => {\n    const result = await window.contract.methods.getDiceResultOfDealer().call();\n    return result;\n  };","const getCurrentAccount = async () => {\n    const accounts = await window.web3.eth.getAccounts();\n    return accounts[0];\n}\n\nexport const PayOut = async () => {\n    const account = await getCurrentAccount();\n    const id = await window.contract.methods.payOut().send({ from: account });\n    return id;\n  };","const getCurrentAccount = async () => {\n  const accounts = await window.web3.eth.getAccounts();\n  return accounts[0];\n};\n\nexport const UserDiceResult = async () => {\n  const finalResult = await window.contract.methods.userDiceResult().call();\n  console.log(\"Result of userDiceResult().call()\", finalResult);\n  return finalResult;\n};\n\nexport const SetUserDiceResult = async () => {\n  const account = await getCurrentAccount();\n  await window.contract.methods.getDiceResultOfUser().send({ from: account });\n}","export const QueryId = async () => {\n    const id = await window.contract.methods.queryId().call();\n    return id;\n  };","const getCurrentAccount = async () => {\n    const accounts = await window.web3.eth.getAccounts();\n    return accounts[0];\n}\n\nexport const RollDice = async () => {\n    const account = await getCurrentAccount();\n  await window.contract.methods.rollDice().send( { from: account });\n  console.log(\"Roll dice is called\")\n};\n","export const RandomResult = async () => {\n    const result = await window.contract.methods.getRandomResult().call();\n    console.log(\"Random result from oracle:\", result);\n    return result;\n  };","import React, { useEffect, useState } from \"react\";\nimport { AddBet } from \"../components/AddBet\";\nimport { DealerBalance } from \"../components/DealerBalance\";\nimport { DealerDiceResult } from \"../components/DealerDiceResult\";\nimport { PayOut } from \"../components/PayOut\";\nimport {\n  SetUserDiceResult,\n  UserDiceResult,\n} from \"../components/PlayerDiceResult\";\nimport { QueryId } from \"../components/QueryId\";\nimport { RollDice } from \"../components/RollDice\";\nimport { RandomResult } from \"../components/RandomResult\";\n\ndeclare global {\n  interface Window {\n    ethereum: any;\n    web3: any;\n    contract: any;\n    IpfsHttpClient: any;\n  }\n}\n\nexport const Home = () => {\n  const [balance, setBalance] = useState<number>(0);\n  const [bet, setBet] = useState<number>(0);\n  const [dealerResult, setDealerResult] = useState<number>(0);\n  const [userResult, setUserResult] = useState<number>(0);\n  const [queryId, setQueryId] = useState<string>();\n  const [OracleResult, setOracleResult] = useState<string>(\"0000\");\n\n  useEffect(() => {\n    getBalance();\n  }, []);\n\n  const getBalance = async () => {\n    const newBalance = await DealerBalance();\n    setBalance(newBalance);\n  };\n\n  const getDealerDiceResult = async () => {\n    const diceResult = await DealerDiceResult();\n    setDealerResult(diceResult);\n  };\n\n  const getUserDiceResult = async () => {\n    const diceResult = await UserDiceResult();\n    setUserResult(diceResult);\n  };\n\n  const setsUserDiceResult = async () => {\n    await SetUserDiceResult();\n    console.log(\"Your dice result is set\");\n  };\n\n  const getRandomResult = async () => {\n    const randomResult = await RandomResult();\n    setOracleResult(randomResult);\n  };\n\n  const getQueryId = async () => {\n    const id = await QueryId();\n    console.log(id);\n    setQueryId(id);\n  };\n\n  return (\n    <main className=\"App\">\n      <section className=\"game-section\">\n        <h2 className=\"game-section__title\">Polarbet the game</h2>\n\n        <div className=\"game-section__dealer game-column\">\n          <h3 className=\"game-column__title game-column__title--dealer\">\n            Dealer\n          </h3>\n          <p className=\"game-column__result\">{dealerResult}</p>\n          <button\n            className=\"game-column__button game-column__button--lime\"\n            onClick={() => getDealerDiceResult()}\n          >\n            show result\n          </button>\n        </div>\n\n        <div className=\"game-section__default game-column\">\n          <div className=\"game-column__c2a-wrapper\">\n            <p>Dealer balance</p>\n            <p>{balance}</p>\n            <button\n              className=\"game-column__button--regular\"\n              onClick={() => getBalance()}\n            >\n              update balance\n            </button>\n          </div>\n\n          <div className=\"game-column__c2a-wrapper\">\n            <p>Set your bet:</p>\n            <input\n              className=\"game-column__input\"\n              type=\"number\"\n              placeholder=\"2\"\n              onChange={(e) => setBet(parseInt(e.target.value))}\n            />\n            <button\n              className=\"game-column__button--regular\"\n              onClick={() => AddBet(bet)}\n            >\n              add bet\n            </button>\n          </div>\n\n          <div className=\"game-column__c2a-wrapper\">\n            <p>Result from oracle</p>\n            <p>{OracleResult}</p>\n            <button\n              className=\"game-column__button--regular\"\n              onClick={() => getRandomResult()}\n            >\n              show result\n            </button>\n          </div>\n\n          <div className=\"game-column__c2a-wrapper\">\n            <p>Query ID</p>\n            <p>{queryId}</p>\n            <button\n              className=\"game-column__button--regular game-column__button--query-id\"\n              onClick={() => getQueryId()}\n            >\n              show query id\n            </button>\n          </div>\n\n          <div className=\"game-column__play-button-wrapper\">\n            <button\n              className=\"game-column__button--regular\"\n              onClick={() => RollDice()}\n            >\n              roll dice\n            </button>\n            <button\n              className=\"game-column__button--regular\"\n              onClick={() => PayOut()}\n            >\n              pay out\n            </button>\n          </div>\n        </div>\n\n        <div className=\"game-section__player game-column\">\n          <h3 className=\"game-column__title game-column__title--player\">You</h3>\n          <p className=\"game-column__result\">{userResult}</p>\n          <button\n            className=\"game-column__button game-column__button--teal\"\n            onClick={() => setsUserDiceResult()}\n          >\n            get result\n          </button>\n          <button\n            className=\"game-column__button game-column__button--teal\"\n            onClick={() => getUserDiceResult()}\n          >\n            show result\n          </button>\n        </div>\n      </section>\n\n      {/* \n      <h2>Dealer balance = {balance}</h2>\n      <button onClick={() => getBalance()}>update balance</button> */}\n\n      {/* <div>\n        <h2>Set your bet:</h2>\n        <input\n          type=\"number\"\n          onChange={(e) => setBet(parseInt(e.target.value))}\n        />\n        <button onClick={() => AddBet(bet)}>add bet</button>\n      </div> */}\n\n      {/* <div> */}\n      {/* <button onClick={() => RollDice()}>roll dice</button> */}\n      {/* <p>Dealer dice result = {dealerResult}</p>\n        <button onClick={() => getDealerDiceResult()}>\n          show the dealer dice result\n        </button> */}\n      {/* <p>Your dice result = {userResult}</p>\n        <button onClick={() => setsUserDiceResult()}>\n          get your dice result\n        </button> */}\n      {/* <button onClick={() => getUserDiceResult()}>\n          show your dice result\n        </button> */}\n\n      {/* <p>Random result from oracle = {OracleResult}</p>\n        <button onClick={() => getRandomResult()}>show the result</button>\n\n        <p>Query ID = {queryId}</p>\n        <button onClick={() => getQueryId()}>show query id</button>\n      </div>\n\n      <button onClick={() => PayOut()}>pay out</button> */}\n    </main>\n  );\n};\n","export const IpfsImage = () => {\n\n    return (\n        <main>\n            <h2>This image is from IPFS</h2>\n            <img src=\"https://ipfs.io/ipfs/QmQ1X9xtZKqHMefkw5AhmriQy5HUMXyftfEFfVDVdgG4fA\" alt=\"\" className=\"ipfs-image\"/>\n        </main>\n    );\n  };","import React from \"react\";\nimport { Route, HashRouter as Router, Switch } from \"react-router-dom\";\nimport { Header } from \"./components/Header\";\nimport { LoadWeb3 } from \"./components/web3\";\nimport { Home } from \"./pages/Home\";\nimport { IpfsImage } from \"./pages/IpfsImage\";\n\nexport const App = () => {\n  \n  LoadWeb3();\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <div className=\"Container\">\n        <Header />\n        <Switch>\n          <Route path=\"/\" exact component={Home}></Route>\n          <Route path=\"/ipfs-image\" exact component={IpfsImage}></Route>\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport { App } from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./assets/css/import.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}